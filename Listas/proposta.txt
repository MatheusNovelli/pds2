Neste exercício você deverá completar as classes List e Node. A classe List representa uma lista encadeada de inteiros. Cada elo dessa lista é uma instância da classe Node:

class Node {
  private:
    int _data;
    Node * _next;
  public:
    Node(int data, Node* next);
    void setData(int data);
    void setNext(Node *next);
    /** Retorna o dado armazenado no nó. 
       @retorna um inteiro.
     */
    int getData() const;
    /** Retorna o próximo nó.
     */
    Node* getNext() const;
};

Parte da implementação da classe list é dada abaixo:

class List {
  public:
    List();

    /** Essa função insere um elemento no começo da lista.
     */
    void insert(int value);
    /** Essa função remove o primeiro nó da lista, e retorna o dado armazenado nele.
       @retorna um inteiro armazenado no primeiro nó da lista.
     */
    int remove();
    /** Esse método indica se a lista está vazia.
       @retorna verdadeiro se a lista está vazia, e falso caso contrário.
     */
    int isEmpty();
    /** Informa o número de elementos da lista.
       @retorna um inteiro n, onde n é o número de nó da lista.
     */
    unsigned size() const;
    /** Retorna o elemento do meio da lista.
       Se a lista possui 2*n ou 2*n + 1 elementos, então o elemento do meio é
       o que está no índice n, assumindo que o primeiro índice é 0.
       @retorna o elemento do meio da lista.
     */
    int middle() const;
    /** Retorna o último elemento da lista.
       @retorna o inteiro armazenado no último nó da lista.
     */
    int last() const;
    /** Esse método move o primeiro nó da lista para última posição.
       Em outras palavras, rotate() + last() == head.
     */
    void rotate();
  private:
    Node *head; /// Ponteiro para o primeiro elemento da lista.
};

Você deverá completar todas as funções que possuem declaração mais não possuem corpo. Fique à vontade para criar funções auxiliares (e privadas) e atributos dentro das classes List e Node. Tenha em mente que o principal objetivo desse exercício é aplicar o princípio de encapsulamento. Você deve enviar os arquivos .cpp e .hpp para as classes List e Node e o arquivo main.cpp. Para testar sua implementação, utilize a função main abaixo:

int main(int argc, char** argv) {
  int input;
  std::cin >> input;
  List *list = new List();
  while (input != 0) {
    list->insert(input);
    std::cin >> input;
  }
  std::cout << "s:" << list->size() << ", ";
  std::cout << "m:" << list->middle() << ", ";
  std::cout << "l:" << list->last() << ", ";
  std::cout << "r:" << list->remove() << ", ";
  std::cout << "m:" << list->middle() << ", ";
  std::cout << "l:" << list->last() << ", ";
  list->rotate();
  std::cout << "m:" << list->middle() << ", ";
  std::cout << "l:" << list->last() << std::endl;
  return 0;
}

Alguns exemplos de uso podem ser vistos logo abaixo:

$ cat t0.txt
2 3 5 7 11 0
$ ./a.out < t0.txt
s:5, m:5, l:2, r:11, m:3, l:2, m:2, l:7

$ cat t1.txt
2 3 5 7 11 13 17 19 23 29 31 37 0
$ ./a.out < t1.txt
s:12, m:13, l:2, r:37, m:13, l:2, m:11, l:31

$ cat t2.txt
1 2 3 4 5 6 7 8 9 0
$ ./a.out < t2.txt 
s:9, m:5, l:1, r:9, m:4, l:1, m:3, l:8